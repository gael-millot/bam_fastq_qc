/*
#########################################################################
##                                                                     ##
##     nextflow.config of 19583_loot                                   ##
##                                                                     ##
##     gmillot A. Millot                                               ##
##     Bioinformatics and Biostatistics Hub                            ##
##     Institut Pasteur Paris                                          ##
##                                                                     ##
#########################################################################
*/

/*
#########################################################################
##                                                                     ##
##     Parameters that must be set by the user                         ##
##                                                                     ##
#########################################################################
*/


/*
########################
##                    ##
##     Data           ##
##                    ##
########################
*/

env {
    sample_path = "/mnt/c/Users/gmillot/Documents/Git_projects/19583_loot/dataset/hifi_bam/unzip_files" // single character string of the path of the bam files directory. Must be either a folder that only contains unzipped bams, or an unzipped file or a .zip file. The last / can be added or not, as it is removed by nextflow file(). Example: sample_path="/mnt/c/Users/gmillot/Documents/Git_projects/19583_loot/results/19583_loot_1751560268/W621.hifi_reads.bam". Example: sample_path="/pasteur/helix/projects/19583_LOOT/dataset/hifi_reads_19583_loot.zip". Example: sample_path = "/mnt/c/Users/gmillot/Documents/Git_projects/19583_loot/dataset/hifi_bam/hifi_bam.zip". Example: "https://zenodo.org/records/15798125/files/W621.hifi_reads.bam". Example: sample_path = "https://zenodo.org/records/15798125/files/W621.hifi_reads.bam"Example with spaces in the path: sample_path="/mnt/x/ROCURONIUM PROJECT/01 Primary data/04.Repertoire analysis/SORT1/SORT1 Seq-original/xlsx_to_fasta_1669018924/All/VL".
    ref_path = "$baseDir/dataset/reference/coli_K12_MG1655_NC_000913.3_ORI_CENTERED/Ecoli-K12-MG1655_ORI_CENTERED.fasta" // single character string of the path of the reference genome.
    kraken_db_path = "/mnt/c/Users/gmillot/Documents/Git_projects/19583_loot/dataset/kraken2_mini" // single character string of the path of the kraken database folder. To use the large one on the Pasteur cluster: kraken_db_path = "/pasteur/helix/services/banques-prod/prod/rel/kraken_standard/current/kraken/2.1.1/standard/". To get a smaller one: wget https://genome-idx.s3.amazonaws.com/kraken/k2_standard_08gb_20230605.tar.gz ; tar -xvzf k2_standard_08gb_20230605.tar.gz.
    cutoff = "50000" // single character string of the minimum length of reads to keep (in bases). Example: cutoff = "5000".
}



/*
########################
##                    ##
##     Graphics       ##
##                    ##
########################
*/

env {

}


/*
######################################
##                                  ##
##     Local / Cluster execution    ##
##                                  ##
######################################
*/

apptainer_local_images = "/mnt/c/Users/gmillot/apptainer" // single character string of the path of the apptainer folder (where all the apptainer images are are pulled and stored for proper nextflow execution). You can indicate an empty folder. In that case, docker images will be pulled from dockerhub, converted into apptainer images and stored into this indicted folder for next executions. Example: apptainer_local_images='/mnt/c/Users/gmillot/apptainer'. Example: apptainer_local_images="$projectDir/apptainer" # do not forget double quotes in that case. See https://confluence.pasteur.fr/pages/viewpage.action?pageId=69304504.
apptainer_cluster_images = "/pasteur/helix/projects/BioIT/gmillot/apptainer" // as for apptainer_local_images but for a cluster usage. It must be a shared folder accessible to all computing nodes. Example: apptainer_local_images='/pasteur/helix/projects/BioIT/gmillot/apptainer'. 
system_exec = 'local' // single character string of the system that runs the workflow. Write 'local' to run on our own computer or any job scheduler managed by nextflow. See the list here: https://www.nextflow.io/docs/latest/executor.html. Example system_exec = 'slurm' (pasteur cluster). Example: system_exec = 'local'. Warning: when using "slurm" other than for the Pasteur cluster, it must be necessary to modify runOptions = '--no-home --bind /pasteur' below. Please, use add_options = '-cwd -l s_vmem=60G' when using sge
cluster_runOptions = "NULL" // single character string of the runOptions parameter of the scheduler. If "NULL", then default values are used, depending on the system_exec setting: (1) if system_exec == 'slurm', then runOptions = '--no-home --bind /pasteur', (2) if system_exec == 'sge', then runOptions = '--bind /rshare1:/rshare1', (3) if system_exec == 'local', then runOptions = '--no-home -B /run/shm:/run/shm'. Please, write the correct runOptions setting if unsure of your environment.
simult_jobs = 3000 // number of max simultaneous jobs. This is to avoid to saturated a cluster if millions of jobs in parallel. Write 0 for all the threads.
slurm_queue = 'common,dedicated' // single character string of the -p option of slurm. Example: slurm_queue = 'common,dedicated'. Example: slurm_queue = 'hubbioit'
slurm_qos = '--qos=fast' // single character string of the --qos option of slurm. Example: slurm_qos= '--qos=fast'. Example: slurm_qos = '--qos=ultrafast'. Example: slurm_qos = '--qos=hubbioit'
add_options = ' ' // single character string of the additional option of slurm. Example: add_options = '--exclude=maestro-1101,maestro-1034' or add_options = ' ', add_options = '--time=70:00:00' (acceptable time formats include "minutes", "minutes:seconds", "hours:minutes:seconds", "days-hours", "days-hours:minutes" and "days-hours:minutes:seconds"). See https://slurm.schedmd.com/sbatch.html#OPT_time for other options.  Please, use add_options = '-cwd -l s_vmem=60G' when using system_exec = 'sge'.

/*
#############################
##                         ##
##     Other (optional)    ##
##                         ##
#############################
*/

env{
    cute_path = "./bin/cute_little_R_functions_12.8.R" // single character string indicating the file (and absolute pathway) of the required cute_little_R_functions toolbox. With ethernet connection available, this can also be used: "https://gitlab.pasteur.fr/gmillot/cute_little_R_functions/raw/v5.1.0/cute_little_R_functions.R" or local "C:\\Users\\gmillot\\Documents\\Git_projects\\cute_little_R_functions\\cute_little_R_functions.R". Other example if no internet: cute_path="$projectDir/bin/cute_little_R_functions_v12.8.R"
    template_rmd_path = "./bin/html_report_template.rmd"
}
out_path_ini = "$projectDir/results" // single character string of where the output files will be saved. Example out_path_ini = '.' for where the main.nf run is executed or out_path_ini = "$projectDir/results" to put the results in a result folder (created if required), $projectDir indicating where the main.nf run is executed. Example: out_path_ini = '/mnt/c/Users/gmillot/Desktop'. Example : out_path_ini="/pasteur/helix/projects/BioIT/gmillot/08002_bourgeron/results". Warning: this does not work: out_path_ini = "/mnt/share/Users/gmillot/Desktop"
result_folder_name = "hifi_pacbio_QC" // single character string.of the name of the folder where the results files are dorpped


/*
#########################################################################
##                                                                     ##
##     End Parameters that must be set by the user                     ##
##                                                                     ##
#########################################################################
*/








//////// Pre processing

int secs = (new Date().getTime())/1000
out_path ="${out_path_ini}/${result_folder_name}_${secs}"

//////// end Pre processing



//////// variables used here and also in the main.nf file

env {
    system_exec = "${system_exec}"
    out_path_ini = "${out_path_ini}"
    out_path = "${out_path}"
    slurm_queue = "${slurm_queue}"
    slurm_qos = "${slurm_qos}"
    add_options = "${add_options}"
}

//////// variables used here and also in the main.nf file





//////// Scopes

// those are closures. See https://www.nextflow.io/docs/latest/script.html#closures
executor { 
    // name = "slurm" // means "if name of the executor is slurm, then ${simult_jobs}, i.e., max ${simult_jobs} simultaneous jobs". Inactivated because applied to all kinds of executors
    queueSize = "${simult_jobs}" // can only be written here and not below because queueSize is a method of executor{}
}

// create a report folder and print a html report file . If no absolute path, will be where the run is executed
// see https://www.nextflow.io/docs/latest/config.html#config-report
report {
       enabled = true
       file = "${out_path}/reports/report.html" // warning: here double quotes to get the nextflow variable interpretation
}

// txt file with all the processes and info
trace {
    enabled = true
    file = "${out_path}/reports/trace.txt"
}

// html file with all the processes
timeline {
    enabled = true
    file = "${out_path}/reports/timeline.html"
}

// .dot picture of the workflow
dag {
    enabled = true
    file = "${out_path}/reports/nf_dag.png"
}


// define apptainer parameters
apptainer {
    enabled = true
    autoMounts = true // automatically mounts host paths in the executed container
    if(cluster_runOptions == "NULL"){
        if(system_exec == 'slurm'){
            runOptions = '--no-home --bind /pasteur' //-B /run/shm:/run/shm has been removed because block the pipeline. Warning: clone_assignment process use python. Thus, -B /run/shm:/run/shm should be required normally
        }
        if(system_exec == 'sge'){
            runOptions = '--no-home --bind /rshare1:/rshare1'
        }
        if(system_exec == 'local'){
            runOptions = '--no-home -B /run/shm:/run/shm' // --no-home prevent apptainer to mount the $HOME path and thus forces apptainer to work with only what is inside the container
        }
    }else{
        runOptions = "${cluster_runOptions}"
    }
    //runOptions = '--home $HOME:/home/$USER --bind /pasteur' // provide any extra command line options supported by the apptainer exec. Here, fait un bind de tout /pasteur dans /pasteur du container. Sinon pas d accès
    if(system_exec == 'local'){
        cacheDir = "${apptainer_local_images}" // "$projectDir/apptainer" can be used but do not forget double quotes.
    }else{
        cacheDir = "${apptainer_cluster_images}" // name of the directory where remote Apptainer images are stored. When rerun, the exec directly uses these without redownloading them. When using a computing cluster it must be a shared folder accessible to all computing nodes
    }
}

//////// end Scopes



//////// directives

// provide the default directives for all the processes in the main.nf pipeline calling this config file
process {
// directives for all the processes
    cpus = 1
    memory='3G'
    executor = "${system_exec}"
    // process.shell = ['/bin/bash', '-euo', 'pipefail']
    // beforeScript = 'module load apptainer'
// end directives for all the processes

    if(system_exec == 'slurm'){
        queue = "$slurm_queue"
        clusterOptions = "$slurm_qos $add_options"
        scratch=false
        maxRetries=3
        errorStrategy = {task.exitStatus in 137..143 ? 'retry' : 'terminate' }
    }else if(system_exec != 'local'){
        beforeScript= '''
            module use /usr/local/package/modulefiles
            module load apptainer/1.2.4
        '''
        penv = 'mpi' // penv stands for Parallel Environment (PE). 'mpi' is a common parallel environment name, often used for Message Passing Interface (MPI) jobs. Please, run qconf -spl on the cluster login node to list available parallel environments. Common PEs are smp, mpi, or similar.
        clusterOptions = "$add_options -S /bin/bash"
        maxRetries=3
        errorStrategy = {task.exitStatus in 137..143 ? 'retry' : 'terminate' }
    }else if(system_exec == 'local'){
        maxRetries=0
        errorStrategy='terminate'
    }

    withLabel: bash {
        container = 'gmillot/bash-extended_v4.0:gitlab_v8.0'
        cpus = 1
        memory = '500M'
    }

    withLabel: unzip {
        container='gmillot/ubuntu_v22.04_extended_v1.0:gitlab_v10.2'
        cpus=1 // only used when name = "local" in the executor part above
        memory='1G' // only used when name = "local" in the executor part above
    }

    withLabel: bioconvert {
        container='bioconvert/bioconvert:0.6.1'
        errorStrategy='ignore'
        cpus=1
    }

    withLabel: kraken{
        container="evolbioinfo/kraken:v2.0.8-beta"
        cpus=20
    }

    withLabel: fastqc {
        container='evolbioinfo/fastqc:v0.11.8'
        cpus=1 // only used when name = "local" in the executor part above
    }

    withLabel: multiqc {
        container='ewels/multiqc:1.10.1'
        errorStrategy='ignore'
        cpus=1
    }

    withLabel: r_ext {
        container='gmillot/r_v4.1.2_extended_v4.0:gitlab_v11.2'
        cpus=1 // only used when name = "local" in the executor part above
        memory='50G' // only used when name = "local" in the executor part above
    }

}

//////// end directives

